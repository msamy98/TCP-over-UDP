/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <fstream>
#include <sstream>


using namespace std;

//#define MYPORT "4950"    // the port users will be connecting to

#define MAXBUFLEN 600


/* Data-only packets */
struct packet {
    /* Header */
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t seqno;
    /* Data */
    char data [500]; /* Not always 500 bytes, can be less */
};

/* Ack-only packets are only 8 bytes */
struct ack_packet {
    uint16_t cksum; /* Optional bonus part */
    uint16_t len;
    uint32_t ackno;
};

void *get_in_addr(struct sockaddr *sa);
vector<string> read_from_file(string path);

void sigchld_handler(int s);

int main(void)
{
    int sockfd, newfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;
    struct sockaddr_storage their_addr;
    struct sigaction sa;
    char buf[MAXBUFLEN];
    socklen_t addr_len;
    char s[INET_ADDRSTRLEN];

    string server_in_path = "server.in";
    vector<string> lines = read_from_file(server_in_path);

    string my_port = lines[0];
    char* port = &my_port[0];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_INET; // set to AF_INET6 to use IPv6
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP

    int yes = 1;
    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    freeaddrinfo(servinfo); // all done with this structure

	if (p == NULL)  { 
        cout << "listener: failed to bind socket\n";
		exit(1);
	}


sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

    printf("listener: waiting to recvfrom...\n");

    while(true){
        memset(buf,0,MAXBUFLEN);

        addr_len = sizeof their_addr;
        numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
            (struct sockaddr *)&their_addr, &addr_len);
        if (numbytes == -1) {
            perror("recvfrom");
            exit(1);
        }


        printf("listener: got packet from %s\n",
            inet_ntop(their_addr.ss_family,
                get_in_addr((struct sockaddr *)&their_addr),
                s, sizeof s));
        printf("listener: packet is %d bytes long\n", numbytes);
        buf[numbytes] = '\0';
        printf("listener: packet contains \"%s\"\n", buf);

        packet request_packet;
        for(int i=0 ; i<numbytes ; i++) 
            request_packet.data[i] = buf[i];
       // memcpy(&request_packet, buf, numbytes);
        
        if(request_packet.len > sizeof(ack_packet)){
            while(!fork()){
                cout << "----------------Child Server-----------------" << endl;
                close(sockfd);
                if((newfd = socket(hints.ai_family, hints.ai_socktype, hints.ai_protocol)) == -1){
                    perror("listener: socket");
                    exit(1);
                }
                if (setsockopt(newfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int))) {
                    perror("setsockopt server_fd:");
                    exit(1);
                }

                int requested_file_name_length = numbytes;
                cout << "data: " << request_packet.data  << endl;
                cout << "len: " << sizeof(request_packet.data) << endl;
                string requested_file_name = string(request_packet.data, 0 ,requested_file_name_length);
                
                
                cout << "Listener: file name: " << requested_file_name << endl;
                vector<string> file_contents = read_from_file(requested_file_name);
                for(auto& line:file_contents){
                    cout << line << endl;
                }
                cout << "----------------------------------------------------" << endl;
                exit(0);
            }
        }
        close(newfd);
    }
    return 0;
}


// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

vector<string> read_from_file(string path) {
    ifstream input_file(path);
    vector<string> lines;
    if (input_file.is_open()) {
        string line;
        while (getline(input_file, line)) {
            lines.push_back(line);
        }
        input_file.close();
    }
    return lines;
}

void sigchld_handler(int s)
{
	(void)s; // quiet unused variable warning

	// waitpid() might overwrite errno, so we save and restore it:
	int saved_errno = errno;

	while(waitpid(-1, NULL, WNOHANG) > 0);

	errno = saved_errno;
}
